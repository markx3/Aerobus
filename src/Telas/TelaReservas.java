/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Telas;

import Entidades.Aerobus;
import Entidades.PessoaFisica;
import Entidades.PessoaJuridica;
import Entidades.ReservaViagem;
import Entidades.ReservaVoo;
import Entidades.Voo;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import static jdk.nashorn.internal.objects.NativeError.printStackTrace;

/**
 *
 * @author mrk
 */
public class TelaReservas extends javax.swing.JFrame {

    private static final byte CPF = 0;
    private static final byte CNPJ = 1;
    private final static byte RESERVAS     = 2;
    private final static byte NOVO         = 5;
    private final static byte EDITAR       = 6;
    private final static byte REMOVER      = 7;
    
    private PessoaFisica pessoaFisica;
    private PessoaJuridica pessoaJuridica;
    private ArrayList<ReservaViagem> arrayReservas;
    private Hashtable<Integer,ReservaViagem> hashReservas;
    private Hashtable hashVoos;
    private ReservaViagem reservaViagem;
    private ArrayList<ReservaVoo> arrayVoo;
    
    private static byte opt;
    private byte docOpt;
    
    /**
     * Creates new form Viagem
     * @param opt
     */
    public TelaReservas(byte opt) {
        TelaReservas.opt = opt;
        initComponents();
        verificaOperacao();
        campoNomeCliente.setEditable(false);
        if (opt == NOVO || opt == EDITAR) carregaVoosDisponiveis();
    }

    private void verificaOperacao() {
        switch(opt) {
            case NOVO: caseNovo(); break;
            case EDITAR: caseEditar(); break;
            case REMOVER: caseRemover(); break;
        }
    }
    
    private void caseNovo() {
        labelTitulo.setText("Reservar viagem");
        cbReservas.setEnabled(false);
    }
    
    private void caseEditar() {
        labelTitulo.setText("Editar reserva");
        tabelaCodVoo.setEnabled(false);

    }
    
    private void caseRemover() {
        labelTitulo.setText("Remover reserva");
        tabelaCodVoo.setEnabled(false);
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        labelTitulo = new javax.swing.JLabel();
        cbDocumento = new javax.swing.JComboBox<>();
        campoDocumento = new javax.swing.JTextField();
        btnConsultaCliente = new javax.swing.JButton();
        labelDocumento = new javax.swing.JLabel();
        campoNomeCliente = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaCodVoo = new javax.swing.JTable();
        btnAdicionarReserva = new javax.swing.JButton();
        btnRemoverReserva = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabelaCodReserva = new javax.swing.JTable();
        btnConfirmarReserva = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        cbReservas = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        labelTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelTitulo.setText("Reserva de viagem");

        cbDocumento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CPF", "CNPJ" }));
        cbDocumento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDocumentoActionPerformed(evt);
            }
        });

        btnConsultaCliente.setText("OK");
        btnConsultaCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultaClienteActionPerformed(evt);
            }
        });

        labelDocumento.setText("Nome:");

        tabelaCodVoo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código Vôo", "Origem", "Destino", "Data", "Partida", "Chegada"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelaCodVoo);

        btnAdicionarReserva.setText("Adicionar");
        btnAdicionarReserva.setEnabled(false);
        btnAdicionarReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarReservaActionPerformed(evt);
            }
        });

        btnRemoverReserva.setText("Remover");
        btnRemoverReserva.setEnabled(false);
        btnRemoverReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverReservaActionPerformed(evt);
            }
        });

        tabelaCodReserva.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código Vôo", "Origem", "Destino", "Data", "Partida", "Chegada"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tabelaCodReserva);

        btnConfirmarReserva.setText("Confirmar");
        btnConfirmarReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarReservaActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        cbReservas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "" }));
        cbReservas.setEnabled(false);
        cbReservas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbReservasActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Vôos disponíveis");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Reserva");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelTitulo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbDocumento, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelDocumento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(campoDocumento)
                            .addComponent(campoNomeCliente))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnConsultaCliente))
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAdicionarReserva, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRemoverReserva, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnConfirmarReserva, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cbReservas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelTitulo)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campoDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConsultaCliente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelDocumento)
                    .addComponent(campoNomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbReservas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdicionarReserva)
                    .addComponent(btnRemoverReserva))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConfirmarReserva)
                    .addComponent(btnCancelar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cbDocumentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDocumentoActionPerformed
        switch(cbDocumento.getSelectedIndex()) {
            case CPF:
                labelDocumento.setText("Nome:");
                break;
            case CNPJ:
                labelDocumento.setText("Razão social:");
                break;
        }
        docOpt = (byte) cbDocumento.getSelectedIndex();
        
        
        
    }//GEN-LAST:event_cbDocumentoActionPerformed

    private void btnConsultaClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultaClienteActionPerformed
        /**
         * Escreve o nome do cliente no devido campo.
         */
        if ("".equals(campoDocumento.getText())) return;
        if (campoDocumento.getText().length() != 11 && docOpt == CPF) {
            JOptionPane.showMessageDialog(null, "Favor inserir CPF válido.");
            return;
        }
        if ("".equals(campoDocumento.getText())) return;
        if (campoDocumento.getText().length() != 14 && docOpt == CNPJ) {
            JOptionPane.showMessageDialog(null, "Favor inserir CNPJ válido.");
        }
  
        if (opt == EDITAR || opt == REMOVER) {
            cbReservas.setEnabled(true);
        }
        
        if ((opt == EDITAR || opt == NOVO) && !Aerobus.arrayVoos.isEmpty()) {
            btnAdicionarReserva.setEnabled(true);
        }
        
        String documento = campoDocumento.getText();
        switch (docOpt) {
            case CPF:
                pessoaFisica = Aerobus.pessoaFisicaHTable.get(documento);
                campoNomeCliente.setText(pessoaFisica.getNome());
                arrayReservas = pessoaFisica.getReservas();
                break;
            case CNPJ:
                pessoaJuridica = Aerobus.pessoaJuridicaHTable.get(documento);
                campoNomeCliente.setText(pessoaJuridica.getRazaoSocial());
                arrayReservas = pessoaFisica.getReservas();
                break;
        }
        for (int i = 0; i < arrayReservas.size(); i++) {
            cbReservas.addItem(String.valueOf(i));
        }
    }//GEN-LAST:event_btnConsultaClienteActionPerformed

    private void btnAdicionarReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarReservaActionPerformed
        /**
         * Adiciona o código do vôo da tabela anterior à reserva de viagem
         */
        DefaultTableModel dtmReservas = (DefaultTableModel) tabelaCodReserva.getModel();
        DefaultTableModel dtmVoos = (DefaultTableModel) tabelaCodVoo.getModel();
        
        Vector<Object> data = (Vector<Object>) dtmVoos.getDataVector().elementAt(tabelaCodVoo.getSelectedRow());
        dtmVoos.removeRow(tabelaCodVoo.getSelectedRow());
        dtmReservas.addRow(data);
        
        if (tabelaCodReserva.getRowCount() != 0) {
            btnRemoverReserva.setEnabled(true);
        }
        
        if (tabelaCodVoo.getRowCount() == 0) {
            btnAdicionarReserva.setEnabled(false);
        }
            
        
    }//GEN-LAST:event_btnAdicionarReservaActionPerformed

    private void btnRemoverReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverReservaActionPerformed
        /**
         * Remove da reserva de viagem uma reserva de vôo
         */
        DefaultTableModel dtmReservas = (DefaultTableModel) tabelaCodReserva.getModel();
        DefaultTableModel dtmVoos = (DefaultTableModel) tabelaCodVoo.getModel();
        
        Vector<Object> data = (Vector<Object>) dtmReservas.getDataVector().elementAt(tabelaCodReserva.getSelectedRow());
        dtmReservas.removeRow(tabelaCodReserva.getSelectedRow());
        dtmVoos.addRow(data);
        
        if (tabelaCodVoo.getRowCount() != 0) {
            btnAdicionarReserva.setEnabled(true);
        }
        
        if (tabelaCodReserva.getRowCount() == 0) {
            btnRemoverReserva.setEnabled(false);
        }
    }//GEN-LAST:event_btnRemoverReservaActionPerformed

    private void btnConfirmarReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarReservaActionPerformed
        /**
         * Confirma a reserva de viagem
         */
        
        if ((campoNomeCliente.equals("") ||
            tabelaCodReserva.getRowCount() == 0) && opt == NOVO)  {
            JOptionPane.showMessageDialog(null, "É necessário selecionar o cliente e no mínimo um vôo!\n");
            dispose();
        }
        
        DefaultTableModel dtmReservas = (DefaultTableModel) tabelaCodReserva.getModel();
        ArrayList<ReservaVoo> tmpArrayVoos = new ArrayList<>();
        ReservaViagem tmpReservaViagem = new ReservaViagem();
        
        for (int i = 0; i < tabelaCodReserva.getRowCount(); i++) {
            int aux = Integer.parseInt(String.valueOf(tabelaCodReserva.getModel().getValueAt(i, 0)));
            ReservaVoo tmp = new ReservaVoo(Aerobus.arrayVoos.get(aux-1));
            tmpArrayVoos.add(tmp);
        }
        tmpReservaViagem.setReservasVoos(tmpArrayVoos);
        switch(opt) {
            case NOVO:
                switch (docOpt) {
                    case CPF:
                        pessoaFisica.getReservas().add(tmpReservaViagem);
                        break;
                    case CNPJ:
                        pessoaJuridica.getReservas().add(tmpReservaViagem);
                        break;
                }
                break;
            case EDITAR:
                if (docOpt == CPF) {
                    pessoaFisica.getReservas().remove(cbReservas.getSelectedIndex()-1);
                    pessoaFisica.getReservas().add(cbReservas.getSelectedIndex()-1, tmpReservaViagem);
                }
                if (docOpt == CNPJ) {
                    pessoaJuridica.getReservas().remove(cbReservas.getSelectedIndex()-1);
                    pessoaJuridica.getReservas().add(cbReservas.getSelectedIndex()-1, tmpReservaViagem);
                }
                break;
            case REMOVER:
                if (docOpt == CPF) {
                    pessoaFisica.getReservas().remove(cbReservas.getSelectedIndex()-1);
                }
                if (docOpt == CNPJ) {
                    pessoaJuridica.getReservas().remove(cbReservas.getSelectedIndex()-1);
                }
                break;
        }
        
        
        dispose();
    }//GEN-LAST:event_btnConfirmarReservaActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        /**
         * Cancela a reserva de viagem
         */
        dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void cbReservasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbReservasActionPerformed
        int option = cbReservas.getSelectedIndex();
        if (option != -1) {
            
            ArrayList<ReservaVoo> tmpArrayVoo =
            arrayReservas.get(option-1).getReservasVoos();
            
            
            DefaultTableModel dtm = (DefaultTableModel) tabelaCodReserva.getModel();
            for (int i = 0; i < tmpArrayVoo.size(); i++) {
                ReservaVoo tmp = tmpArrayVoo.get(i);
                Object [] data = {
                    String.valueOf(tmp.getVoo().getId()), 
                    tmp.getVoo().getDescricaoVoo().getAeroportoOrigem().getCodigo(),
                    tmp.getVoo().getDescricaoVoo().getAeroportoChegada().getCodigo(),
                    tmp.getVoo().getData(),
                    tmp.getVoo().getDescricaoVoo().getHorarioPartida(),
                    tmp.getVoo().getDescricaoVoo().getHorarioChegada()
                };
                dtm.addRow(data);
            }
        }
    }//GEN-LAST:event_cbReservasActionPerformed

    private void carregaVoosDisponiveis() {
        DefaultTableModel dtm = (DefaultTableModel) tabelaCodVoo.getModel();
        for (int i = 0; i < Aerobus.arrayVoos.size(); i++) {
            Voo tmp = Aerobus.arrayVoos.get(i);
            Object data [] = {
                String.valueOf(tmp.getId()),
                tmp.getDescricaoVoo().getAeroportoOrigem().getCodigo(),
                tmp.getDescricaoVoo().getAeroportoChegada().getCodigo(),
                tmp.getData(),
                tmp.getDescricaoVoo().getHorarioPartida(),
                tmp.getDescricaoVoo().getHorarioChegada()
            };
            dtm.addRow(data);
        }
    }
    
    @Override
    public void dispose() {
        super.dispose();
        Manter tela = new Manter(RESERVAS);
        tela.setVisible(true);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaReservas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaReservas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaReservas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaReservas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaReservas(opt).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdicionarReserva;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnConfirmarReserva;
    private javax.swing.JButton btnConsultaCliente;
    private javax.swing.JButton btnRemoverReserva;
    private javax.swing.JTextField campoDocumento;
    private javax.swing.JTextField campoNomeCliente;
    private javax.swing.JComboBox<String> cbDocumento;
    private javax.swing.JComboBox<String> cbReservas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel labelDocumento;
    private javax.swing.JLabel labelTitulo;
    private javax.swing.JTable tabelaCodReserva;
    private javax.swing.JTable tabelaCodVoo;
    // End of variables declaration//GEN-END:variables
}
