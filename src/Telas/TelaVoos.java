/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Telas;

import Entidades.Aerobus;
import Entidades.Aeroporto;
import Entidades.DescricaoAviao;
import Entidades.DescricaoVoo;
import Entidades.Voo;
import Negocio.NegocioVoo;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Set;
import javax.swing.JComboBox;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;

/**
 *
 * @author mrk
 */
public class TelaVoos extends javax.swing.JFrame {

    private final static byte VOOS         = 3;
    private final static byte NOVO         = 5;
    private final static byte EDITAR       = 6;
    private final static byte REMOVER      = 7;
    
    private static byte opt;
    
    private final NegocioVoo negocio = new NegocioVoo(this);
    private final Hashtable<String, DescricaoAviao> hashDescricaoAviao = new Hashtable<>();
    private final Hashtable<String, Aeroporto> hashAeroporto = new Hashtable<>();
    private Voo voo;
    private DescricaoVoo descricaoVoo;
    private Aeroporto aeroporto;
    
    /**
     * Creates new form Voo
     * @param opt
     */
    public TelaVoos(byte opt) {
        TelaVoos.opt = opt;
        initComponents();
        verificaOperacao();
        int i = 0;
        for(i = 0; i < Aerobus.arrayDescricaoAviao.size(); i++) {
            DescricaoAviao tmp = Aerobus.arrayDescricaoAviao.get(i);
            hashDescricaoAviao.put(tmp.toString(), tmp);
            cbAviao.addItem(tmp.toString());
        }
        
        for (i = 0; i < Aerobus.arrayAeroporto.size(); i++) {
            boolean isInIndexDestino = false;
            boolean isInIndexOrigem = false;
            
            Aeroporto tmp = Aerobus.arrayAeroporto.get(i);
            String cidade = tmp.getCidade();
            String codigo = tmp.getCodigo();
            hashAeroporto.put(tmp.getCodigo(), tmp);
            
            for (int j = 0; j < cbCidadeDestino.getItemCount(); j++) { 
                if (cbCidadeDestino.getItemAt(j).equals(cidade)) isInIndexDestino = true;
            }
            for (int j = 0; j < cbCidadeOrigem.getItemCount(); j++) {
                if (cbCidadeOrigem.getItemAt(j).equals(cidade)) isInIndexOrigem = true;
            }
            if (!isInIndexDestino) cbCidadeDestino.addItem(cidade);
            if (!isInIndexOrigem) cbCidadeOrigem.addItem(cidade);
           
        }
        if (opt == EDITAR || opt == REMOVER) {
            for (i = 0; i < Aerobus.arrayVoos.size(); i++) {
                Voo tmp = Aerobus.arrayVoos.get(i);
                cbVoo.addItem(tmp.toString());
            }
        } 
        
    }

    private void verificaOperacao() {
         switch(opt) {
            case NOVO: caseNovo(); break;
            case EDITAR: caseEditar(); break;
            case REMOVER: caseRemover(); break;
        }
    }
    
    private void caseNovo() {
        labelTitulo.setText("Novo vôo");
        cbVoo.setEnabled(false);
    }
    
    private void caseEditar() {
        labelTitulo.setText("Editar vôo");
        desabilitaItems();
    }
    
    private void caseRemover() {
        labelTitulo.setText("Remover vôo");
        desabilitaItems();
    }
    
    private void habilitaItems() {
        campoDataPartida.setEnabled(true);
        campoVagas.setEnabled(true);
        cbAeroportoDestino.setEnabled(true);
        cbAeroportoOrigem.setEnabled(true);
        cbCidadeDestino.setEnabled(true);
        cbCidadeOrigem.setEnabled(true);
        cbAviao.setEnabled(true);

                
    }
    
    private void desabilitaItems() {
        campoDataPartida.setEnabled(false);
        campoVagas.setEnabled(false);
        cbAeroportoDestino.setEnabled(false);
        cbAeroportoOrigem.setEnabled(false);
        cbCidadeDestino.setEnabled(false);
        cbCidadeOrigem.setEnabled(false);
        cbAviao.setEnabled(false);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelTitulo = new javax.swing.JLabel();
        cbVoo = new javax.swing.JComboBox<>();
        labelCidadeOrigem = new javax.swing.JLabel();
        cbCidadeOrigem = new javax.swing.JComboBox<>();
        labelCidadeDestino = new javax.swing.JLabel();
        cbCidadeDestino = new javax.swing.JComboBox<>();
        labelAeroportoOrigem = new javax.swing.JLabel();
        cbAeroportoOrigem = new javax.swing.JComboBox<>();
        labelAeroportoDestino = new javax.swing.JLabel();
        cbAeroportoDestino = new javax.swing.JComboBox<>();
        labelDataPartida = new javax.swing.JLabel();
        campoDataPartida = new javax.swing.JFormattedTextField();
        labelAviao = new javax.swing.JLabel();
        cbAviao = new javax.swing.JComboBox<>();
        labelVagas = new javax.swing.JLabel();
        btnConfirmar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        labelHorarioPartida = new javax.swing.JLabel();
        campoHorarioPartida = new javax.swing.JFormattedTextField();
        labelHorarioChegada = new javax.swing.JLabel();
        campoHorarioChegada = new javax.swing.JFormattedTextField();
        campoVagas = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        labelTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelTitulo.setText("jLabel1");

        cbVoo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        cbVoo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbVooActionPerformed(evt);
            }
        });

        labelCidadeOrigem.setText("Cidade de Origem:");

        cbCidadeOrigem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        cbCidadeOrigem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCidadeOrigemActionPerformed(evt);
            }
        });

        labelCidadeDestino.setText("Cidade de Destino:");

        cbCidadeDestino.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        cbCidadeDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCidadeDestinoActionPerformed(evt);
            }
        });

        labelAeroportoOrigem.setText("Aeroporto de Origem:");

        cbAeroportoOrigem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));

        labelAeroportoDestino.setText("Aeroporto de Destino:");

        cbAeroportoDestino.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));

        labelDataPartida.setText("Data de Partida:");

        try {
            campoDataPartida.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        labelAviao.setText("Avião:");

        cbAviao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        cbAviao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAviaoActionPerformed(evt);
            }
        });

        labelVagas.setText("Vagas disponíveis:");

        btnConfirmar.setText("Confirmar");
        btnConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        labelHorarioPartida.setText("Horário Partida:");

        try {
            campoHorarioPartida.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        labelHorarioChegada.setText("Horário Chegada:");

        try {
            campoHorarioChegada.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labelTitulo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbVoo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnConfirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 148, Short.MAX_VALUE)
                        .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(labelAeroportoOrigem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(labelDataPartida)
                                .addComponent(labelCidadeOrigem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(labelAviao)
                            .addComponent(labelHorarioPartida))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbCidadeOrigem, 0, 150, Short.MAX_VALUE)
                            .addComponent(cbAeroportoOrigem, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(campoDataPartida)
                            .addComponent(cbAviao, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(campoHorarioPartida))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelCidadeDestino)
                            .addComponent(labelAeroportoDestino)
                            .addComponent(labelVagas)
                            .addComponent(labelHorarioChegada))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(campoHorarioChegada)
                            .addComponent(cbCidadeDestino, 0, 150, Short.MAX_VALUE)
                            .addComponent(cbAeroportoDestino, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(campoVagas))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelTitulo)
                .addGap(18, 18, 18)
                .addComponent(cbVoo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelCidadeOrigem)
                    .addComponent(cbCidadeOrigem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelCidadeDestino)
                    .addComponent(cbCidadeDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelAeroportoOrigem)
                    .addComponent(cbAeroportoOrigem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelAeroportoDestino)
                    .addComponent(cbAeroportoDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelDataPartida)
                    .addComponent(campoDataPartida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelAviao)
                    .addComponent(cbAviao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelVagas)
                    .addComponent(campoVagas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelHorarioPartida)
                    .addComponent(campoHorarioPartida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelHorarioChegada)
                    .addComponent(campoHorarioChegada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConfirmar)
                    .addComponent(btnCancelar))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarActionPerformed
       String data = campoDataPartida.getText();
       int numPoltronas = Integer.parseInt(campoVagas.getText());
       String horarioPartida = campoHorarioPartida.getText();
       String horarioChegada = campoHorarioChegada.getText();
       DescricaoAviao descricaoAviao = hashDescricaoAviao.get(cbAviao.getItemAt(cbAviao.getSelectedIndex()));
       Aeroporto aeroportoOrigem = hashAeroporto.get(cbAeroportoOrigem.getItemAt(cbAeroportoOrigem.getSelectedIndex()));
       Aeroporto aeroportoDestino = hashAeroporto.get(cbAeroportoDestino.getItemAt(cbAeroportoDestino.getSelectedIndex()));
       
       if ((opt == NOVO || opt == EDITAR) && (data.equals("") || numPoltronas == 0 || horarioPartida.equals("")
                                              || horarioChegada.equals("") || descricaoAviao == null 
                                              || aeroportoOrigem == null || aeroportoDestino == null )) {
           JOptionPane.showMessageDialog(null, "Erro! Todos os campos são obrigatórios.\n");
           dispose();
       }
       
       switch(opt) {
           case NOVO:
               descricaoVoo = new DescricaoVoo(horarioPartida, horarioChegada, aeroportoOrigem, aeroportoDestino, descricaoAviao);
               voo = new Voo(data, numPoltronas, descricaoVoo);
               Aerobus.arrayVoos.add(voo);
               break;
           case EDITAR:
               voo = Aerobus.arrayVoos.get(cbVoo.getSelectedIndex()-1);
               descricaoVoo = voo.getDescricaoVoo();
               descricaoVoo.setAeroportoChegada(aeroportoDestino);
               descricaoVoo.setAeroportoOrigem(aeroportoOrigem);
               descricaoVoo.setDescricaoAviao(descricaoAviao);
               descricaoVoo.setHorarioChegada(horarioChegada);
               descricaoVoo.setHorarioPartida(horarioPartida);
               voo.setData(data);
               voo.setDescricaoVoo(descricaoVoo);
               voo.setNumPoltronas(numPoltronas);
               break;
           case REMOVER:
               voo = Aerobus.arrayVoos.remove(cbVoo.getSelectedIndex()-1);
               break;
       }
       
       dispose();
    }//GEN-LAST:event_btnConfirmarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void cbVooActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbVooActionPerformed
        int option = cbVoo.getSelectedIndex();
        if (option != -1) {
            voo = Aerobus.arrayVoos.get(option-1);
            descricaoVoo = voo.getDescricaoVoo();
            Aeroporto aeroportoOrigem = descricaoVoo.getAeroportoOrigem();
            Aeroporto aeroportoDestino = descricaoVoo.getAeroportoChegada();
            cbCidadeDestino.setSelectedItem(aeroportoDestino.getCidade());
            cbCidadeOrigem.setSelectedItem(aeroportoOrigem.getCidade());
            cbAeroportoOrigem.setSelectedItem(aeroportoOrigem.getCodigo());
            cbAeroportoDestino.setSelectedItem(aeroportoDestino.getCodigo());
            campoDataPartida.setText(voo.getData());
            cbAviao.setSelectedItem(descricaoVoo.getDescricaoAviao().toString());
            campoVagas.setText(String.valueOf(voo.getNumPoltronas()));
            campoHorarioChegada.setText(descricaoVoo.getHorarioChegada());
            campoHorarioPartida.setText(descricaoVoo.getHorarioPartida());
            habilitaItems();
        }
        if (option == -1 || opt == REMOVER) desabilitaItems();
    }//GEN-LAST:event_cbVooActionPerformed

    private void cbCidadeOrigemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCidadeOrigemActionPerformed

        int option = cbCidadeOrigem.getSelectedIndex();
        if (option != -1) {
            String cidade = cbCidadeOrigem.getItemAt(option);
            cbAeroportoOrigem.removeAllItems();
            for (int i = 0; i < Aerobus.arrayAeroporto.size(); i++) {
                Aeroporto tmp = Aerobus.arrayAeroporto.get(i);
                if (cidade.equals(tmp.getCidade())) {
                    cbAeroportoOrigem.addItem(tmp.getCodigo());
                }
            }
        }
    }//GEN-LAST:event_cbCidadeOrigemActionPerformed

    private void cbCidadeDestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCidadeDestinoActionPerformed
        int option = cbCidadeDestino.getSelectedIndex();
        if (option != -1) {
            String cidade = cbCidadeDestino.getItemAt(option);
            cbAeroportoDestino.removeAllItems();
            for (int i = 0; i < Aerobus.arrayAeroporto.size(); i++) {
                Aeroporto tmp = Aerobus.arrayAeroporto.get(i);
                if(cidade.equals(tmp.getCidade())) {
                    cbAeroportoDestino.addItem(tmp.getCodigo());
                }
            }
        }
    }//GEN-LAST:event_cbCidadeDestinoActionPerformed

    private void cbAviaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAviaoActionPerformed
        int option = cbAviao.getSelectedIndex();
        if (option != -1) {
            DescricaoAviao tmp = Aerobus.arrayDescricaoAviao.get(option-1);
            campoVagas.setText(String.valueOf(tmp.getNumAssentos()));
        }
    }//GEN-LAST:event_cbAviaoActionPerformed

    @Override
    public void dispose() {
        super.dispose();
        Manter tela = new Manter(VOOS);
        tela.setVisible(true);
    }

    public static byte getOpt() {
        return opt;
    }

    public JFormattedTextField getCampoDataPartida() {
        return campoDataPartida;
    }

    public JFormattedTextField getCampoVagas() {
        return (JFormattedTextField) campoVagas;
    }

    public JComboBox<String> getCbAeroportoDestino() {
        return cbAeroportoDestino;
    }

    public JComboBox<String> getCbAeroportoOrigem() {
        return cbAeroportoOrigem;
    }

    public JComboBox<String> getCbAviao() {
        return cbAviao;
    }

    public JComboBox<String> getCbCidadeDestino() {
        return cbCidadeDestino;
    }

    public JComboBox<String> getCbCidadeOrigem() {
        return cbCidadeOrigem;
    }

    public JComboBox<String> getCbVoo() {
        return cbVoo;
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaVoos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaVoos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaVoos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaVoos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaVoos(opt).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnConfirmar;
    private javax.swing.JFormattedTextField campoDataPartida;
    private javax.swing.JFormattedTextField campoHorarioChegada;
    private javax.swing.JFormattedTextField campoHorarioPartida;
    private javax.swing.JTextField campoVagas;
    private javax.swing.JComboBox<String> cbAeroportoDestino;
    private javax.swing.JComboBox<String> cbAeroportoOrigem;
    private javax.swing.JComboBox<String> cbAviao;
    private javax.swing.JComboBox<String> cbCidadeDestino;
    private javax.swing.JComboBox<String> cbCidadeOrigem;
    private javax.swing.JComboBox<String> cbVoo;
    private javax.swing.JLabel labelAeroportoDestino;
    private javax.swing.JLabel labelAeroportoOrigem;
    private javax.swing.JLabel labelAviao;
    private javax.swing.JLabel labelCidadeDestino;
    private javax.swing.JLabel labelCidadeOrigem;
    private javax.swing.JLabel labelDataPartida;
    private javax.swing.JLabel labelHorarioChegada;
    private javax.swing.JLabel labelHorarioPartida;
    private javax.swing.JLabel labelTitulo;
    private javax.swing.JLabel labelVagas;
    // End of variables declaration//GEN-END:variables
}
